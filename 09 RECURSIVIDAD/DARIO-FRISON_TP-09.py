# TP 9 - Recursividad - Tecnicatura Universitaria en Programacion
# Alumno: Dario Frison

# 1. Crea una funci√≥n  recursiva que calcule el factorial de un n√∫mero. 
# Luego, utiliza esa funci√≥n para calcular y mostrar en pantalla el factorial de todos los n√∫meros enteros entre 1 y el n√∫mero que indique el usuario

def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)


def ejercicio_1():
    # Solicitar numero al usuario
    while True:
        entrada = input("Ingrese un n√∫mero entero positivo: ")
        if entrada.isdigit() and int(entrada) > 0:
            numero = int(entrada)
            break
        else:
            print("** Error: Debe ingresar un n√∫mero entero positivo **")

    print(f"Factoriales desde 1 hasta {numero}: {factorial(numero)}")

# 2. Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n indicada. Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario especifique.

def fibonacci(n):
    if n == 0:
        return 0
    elif n == 1:
        return 1
    else:
        return fibonacci(n - 1) + fibonacci(n - 2)

def ejercicio_2():
    while True:
        entrada = input("Ingrese la posici√≥n de la serie de Fibonacci que desea calcular: ")
        if entrada.isdigit() and int(entrada) >= 0:
            posicion = int(entrada)
            break
        else:
            print("** Error: Debe ingresar un n√∫mero entero no negativo **")

    print(f"Fibonacci en la posici√≥n {posicion}: {fibonacci(posicion)}")

# 3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un exponente, utilizando la f√≥rmula ùëõùëö = ùëõ‚àóùëõ(ùëö‚àí1). Prueba esta funci√≥n en un algoritmo general

def potencia(base, exponente):
    if exponente == 0:
        return 1
    else:
        return base * potencia(base, exponente - 1)

def ejercicio_3():
    while True:
        entrada_base = input("Ingrese la base (n√∫mero entero): ")
        entrada_exponente = input("Ingrese el exponente (n√∫mero entero no negativo): ")
        if entrada_base.isdigit() and entrada_exponente.isdigit() and int(entrada_exponente) >= 0:
            base = int(entrada_base)
            exponente = int(entrada_exponente)
            break
        else:
            print("** Error: Debe ingresar n√∫meros enteros v√°lidos **")

    print(f"{base} elevado a {exponente} es: {potencia(base, exponente)}")























def main():
    # ejercicio_1()
    # ejercicio_2()
    ejercicio_3()

main()